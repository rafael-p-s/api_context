*** UTILIZAR O JSON SERVER ***
npm i json-server , dentro da pasta já criada do projeto.

Depois de instalar o pacote de API, json-server, criar uma pasta "data" na raiz da pasta "mãe".
Dentro de "data" criar o arquivo "db.json" nesse arquivo:
{
    "products":[
        {
            "id":1,
            "name": "Camiseta",
            "price":59.9
        }
        //Caso queria ter mais de um "Produto", no caso, só copiar esse modelo /\
    ]
}
Agora dentro do arquivo "package.json", na raiz do projeto, será necessário criar um "script":
"server": "json-server --watch data/db.json"
Agora abrir o console e digitar: npm run server para iniciar.
***OBS: O SERVIDOR REACT E O SERVIDOR SERVER SÃO NA MESMA PORTA, NO CASO 3000, SENDO ASSIM EXECUTAR PRIMEIRO O SERVER, QUE VAI PEGAR A 3000. DEPOIS EXECUTAR O REACT QUE IRÁ PEDIR PARA ABRIR EM OUTRA PORTA 3001***
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
**CONTEXT API**
Um recurso que facilita o compartilhamento de um estado entre componentes, ou seja, quando precisamos de dados 'globais', provavelmente precisamos utilizar o Context.
O "Context" precisa encapsular os componentes que receberão seus valores, geralmente colocamos no App.js ou index.js.
Os contextos geralmente ficam na pasta "context"
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
**CRIANDO O CONTEXTO**
Primeiramente vamos ter que criar o Context, o arquivo deve sempre ter a primeira letra maiúscula no nome, e geralmente termina em Context: SomeContext.js.
A convenção é deixar na pasta context em src, onde vamos utilizar o valor do contexto, o arquivo precisa ser importado.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
**CRIANDO O PROVIDER**
O provider vai delimitar onde o contexto é utilizado, vamos criar uma espécie de componente com a prop children e este Provider deve encapsular os demais componentes em que precisamos consultar ou alterar o valor.
Geralmente ele fica em App.js ou em index.js.
Agora poderemos compartilhar o valor do contexto em todos os componentes
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
**ALTERANDO O CONTEXTO**
Para alterar o valor do contexto precisamos criar um componente que utilize a função da mudança de contexto.
Esta mudança ocorrerá no Context e poderá ser consumida por todos os componentes que recbem o contexto.
E assim finalizados o cilco da Context API.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
**REFATORANDO CONTEXT COM HOOK**
Podemos criar um hook para utilizar o context, isso nos dá algumas vantagens. Não precisamos importar o useContext em todos os lugares que vamos usar contexto, só o hook.
Temo um espaço para fazer uma validação do contexto.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
**CONTEXT MAIS COMPLEXOS**
Contexto mais complexos podem ter variações no comportamento, para isso vamos utilizar um hook chamado useReducer.
Que é como um useState, mas para controle de dados complexos, no reducer teremos diferentes ações com um "switch".
E na aplicação vamos consumir o estado atual do dado que esá no reducer.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
**ALTERANDO CONTEXTO COMPLETO**
Para alterar o contexto vamos utilizar uma função chamada "dispatch", com isso ela estará no "reducer" também.
E deve conter todas as informações necessárias para as alterações do valor do context
Ou seja, o switch entra em ação e retorna um novo contexto.
